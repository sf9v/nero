// Code generated by nero, DO NOT EDIT.
package playerrepo

import (
	"github.com/sf9v/nero/aggregate"
)

// Avg is a average aggregate operator
func Avg(col Column) aggregate.AggFunc {
	return func(aggs []*aggregate.Aggregate) []*aggregate.Aggregate {
		return append(aggs, &aggregate.Aggregate{
			Col: col.String(),
			Op:  aggregate.Avg,
		})
	}
}

// Count is a count aggregate operator
func Count(col Column) aggregate.AggFunc {
	return func(aggs []*aggregate.Aggregate) []*aggregate.Aggregate {
		return append(aggs, &aggregate.Aggregate{
			Col: col.String(),
			Op:  aggregate.Count,
		})
	}
}

// Max is a max aggregate operator
func Max(col Column) aggregate.AggFunc {
	return func(aggs []*aggregate.Aggregate) []*aggregate.Aggregate {
		return append(aggs, &aggregate.Aggregate{
			Col: col.String(),
			Op:  aggregate.Max,
		})
	}
}

// Min is a min aggregate operator
func Min(col Column) aggregate.AggFunc {
	return func(aggs []*aggregate.Aggregate) []*aggregate.Aggregate {
		return append(aggs, &aggregate.Aggregate{
			Col: col.String(),
			Op:  aggregate.Min,
		})
	}
}

// Sum is a sum aggregate operator
func Sum(col Column) aggregate.AggFunc {
	return func(aggs []*aggregate.Aggregate) []*aggregate.Aggregate {
		return append(aggs, &aggregate.Aggregate{
			Col: col.String(),
			Op:  aggregate.Sum,
		})
	}
}

// None is a none aggregate operator
func None(col Column) aggregate.AggFunc {
	return func(aggs []*aggregate.Aggregate) []*aggregate.Aggregate {
		return append(aggs, &aggregate.Aggregate{
			Col: col.String(),
			Op:  aggregate.None,
		})
	}
}
