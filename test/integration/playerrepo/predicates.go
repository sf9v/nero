// Code generated by nero, DO NOT EDIT.
package playerrepo

import (
	"time"

	"github.com/sf9v/nero/comparison"
	"github.com/sf9v/nero/test/integration/player"
)

// PredFunc is a predicate function
type PredFunc func(*comparison.Predicates)

// IDEq applies "equal" operator on "id" column
func IDEq(id string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.Eq,
			Arg: id,
		})
	}
}

// IDNotEq applies "not equal" operator on "id" column
func IDNotEq(id string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.NotEq,
			Arg: id,
		})
	}
}

// IDGt applies "greater than" operator on "id" column
func IDGt(id string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.Gt,
			Arg: id,
		})
	}
}

// IDGtOrEq applies "greater than or equal" operator on "id" column
func IDGtOrEq(id string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.GtOrEq,
			Arg: id,
		})
	}
}

// IDLt applies "less than" operator on "id" column
func IDLt(id string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.Lt,
			Arg: id,
		})
	}
}

// IDLtOrEq applies "less than or equal" operator on "id" column
func IDLtOrEq(id string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.LtOrEq,
			Arg: id,
		})
	}
}

// IDIn applies "in" operator on "id" column
func IDIn(ids ...string) PredFunc {
	args := []interface{}{}
	for _, v := range ids {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.In,
			Arg: args,
		})
	}
}

// IDNotIn applies "not in" operator on "id" column
func IDNotIn(ids ...string) PredFunc {
	args := []interface{}{}
	for _, v := range ids {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.NotIn,
			Arg: args,
		})
	}
}

// EmailEq applies "equal" operator on "email" column
func EmailEq(email string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.Eq,
			Arg: email,
		})
	}
}

// EmailNotEq applies "not equal" operator on "email" column
func EmailNotEq(email string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.NotEq,
			Arg: email,
		})
	}
}

// EmailGt applies "greater than" operator on "email" column
func EmailGt(email string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.Gt,
			Arg: email,
		})
	}
}

// EmailGtOrEq applies "greater than or equal" operator on "email" column
func EmailGtOrEq(email string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.GtOrEq,
			Arg: email,
		})
	}
}

// EmailLt applies "less than" operator on "email" column
func EmailLt(email string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.Lt,
			Arg: email,
		})
	}
}

// EmailLtOrEq applies "less than or equal" operator on "email" column
func EmailLtOrEq(email string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.LtOrEq,
			Arg: email,
		})
	}
}

// EmailIn applies "in" operator on "email" column
func EmailIn(emails ...string) PredFunc {
	args := []interface{}{}
	for _, v := range emails {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.In,
			Arg: args,
		})
	}
}

// EmailNotIn applies "not in" operator on "email" column
func EmailNotIn(emails ...string) PredFunc {
	args := []interface{}{}
	for _, v := range emails {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.NotIn,
			Arg: args,
		})
	}
}

// NameEq applies "equal" operator on "name" column
func NameEq(name string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.Eq,
			Arg: name,
		})
	}
}

// NameNotEq applies "not equal" operator on "name" column
func NameNotEq(name string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.NotEq,
			Arg: name,
		})
	}
}

// NameGt applies "greater than" operator on "name" column
func NameGt(name string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.Gt,
			Arg: name,
		})
	}
}

// NameGtOrEq applies "greater than or equal" operator on "name" column
func NameGtOrEq(name string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.GtOrEq,
			Arg: name,
		})
	}
}

// NameLt applies "less than" operator on "name" column
func NameLt(name string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.Lt,
			Arg: name,
		})
	}
}

// NameLtOrEq applies "less than or equal" operator on "name" column
func NameLtOrEq(name string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.LtOrEq,
			Arg: name,
		})
	}
}

// NameIn applies "in" operator on "name" column
func NameIn(names ...string) PredFunc {
	args := []interface{}{}
	for _, v := range names {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.In,
			Arg: args,
		})
	}
}

// NameNotIn applies "not in" operator on "name" column
func NameNotIn(names ...string) PredFunc {
	args := []interface{}{}
	for _, v := range names {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.NotIn,
			Arg: args,
		})
	}
}

// AgeEq applies "equal" operator on "age" column
func AgeEq(age int) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.Eq,
			Arg: age,
		})
	}
}

// AgeNotEq applies "not equal" operator on "age" column
func AgeNotEq(age int) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.NotEq,
			Arg: age,
		})
	}
}

// AgeGt applies "greater than" operator on "age" column
func AgeGt(age int) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.Gt,
			Arg: age,
		})
	}
}

// AgeGtOrEq applies "greater than or equal" operator on "age" column
func AgeGtOrEq(age int) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.GtOrEq,
			Arg: age,
		})
	}
}

// AgeLt applies "less than" operator on "age" column
func AgeLt(age int) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.Lt,
			Arg: age,
		})
	}
}

// AgeLtOrEq applies "less than or equal" operator on "age" column
func AgeLtOrEq(age int) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.LtOrEq,
			Arg: age,
		})
	}
}

// AgeIn applies "in" operator on "age" column
func AgeIn(ages ...int) PredFunc {
	args := []interface{}{}
	for _, v := range ages {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.In,
			Arg: args,
		})
	}
}

// AgeNotIn applies "not in" operator on "age" column
func AgeNotIn(ages ...int) PredFunc {
	args := []interface{}{}
	for _, v := range ages {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.NotIn,
			Arg: args,
		})
	}
}

// RaceEq applies "equal" operator on "race" column
func RaceEq(race player.Race) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "race",
			Op:  comparison.Eq,
			Arg: race,
		})
	}
}

// RaceNotEq applies "not equal" operator on "race" column
func RaceNotEq(race player.Race) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "race",
			Op:  comparison.NotEq,
			Arg: race,
		})
	}
}

// RaceGt applies "greater than" operator on "race" column
func RaceGt(race player.Race) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "race",
			Op:  comparison.Gt,
			Arg: race,
		})
	}
}

// RaceGtOrEq applies "greater than or equal" operator on "race" column
func RaceGtOrEq(race player.Race) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "race",
			Op:  comparison.GtOrEq,
			Arg: race,
		})
	}
}

// RaceLt applies "less than" operator on "race" column
func RaceLt(race player.Race) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "race",
			Op:  comparison.Lt,
			Arg: race,
		})
	}
}

// RaceLtOrEq applies "less than or equal" operator on "race" column
func RaceLtOrEq(race player.Race) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "race",
			Op:  comparison.LtOrEq,
			Arg: race,
		})
	}
}

// RaceIn applies "in" operator on "race" column
func RaceIn(races ...player.Race) PredFunc {
	args := []interface{}{}
	for _, v := range races {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "race",
			Op:  comparison.In,
			Arg: args,
		})
	}
}

// RaceNotIn applies "not in" operator on "race" column
func RaceNotIn(races ...player.Race) PredFunc {
	args := []interface{}{}
	for _, v := range races {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "race",
			Op:  comparison.NotIn,
			Arg: args,
		})
	}
}

// UpdatedAtEq applies "equal" operator on "updated_at" column
func UpdatedAtEq(updatedAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.Eq,
			Arg: updatedAt,
		})
	}
}

// UpdatedAtNotEq applies "not equal" operator on "updated_at" column
func UpdatedAtNotEq(updatedAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.NotEq,
			Arg: updatedAt,
		})
	}
}

// UpdatedAtGt applies "greater than" operator on "updated_at" column
func UpdatedAtGt(updatedAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.Gt,
			Arg: updatedAt,
		})
	}
}

// UpdatedAtGtOrEq applies "greater than or equal" operator on "updated_at" column
func UpdatedAtGtOrEq(updatedAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.GtOrEq,
			Arg: updatedAt,
		})
	}
}

// UpdatedAtLt applies "less than" operator on "updated_at" column
func UpdatedAtLt(updatedAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.Lt,
			Arg: updatedAt,
		})
	}
}

// UpdatedAtLtOrEq applies "less than or equal" operator on "updated_at" column
func UpdatedAtLtOrEq(updatedAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.LtOrEq,
			Arg: updatedAt,
		})
	}
}

// UpdatedAtIsNull applies "is null" operator on "updated_at" column
func UpdatedAtIsNull() PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.IsNull,
		})
	}
}

// UpdatedAtIsNotNull applies "is not null" operator on "updated_at" column
func UpdatedAtIsNotNull() PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.IsNotNull,
		})
	}
}

// UpdatedAtIn applies "in" operator on "updated_at" column
func UpdatedAtIn(updatedAts ...*time.Time) PredFunc {
	args := []interface{}{}
	for _, v := range updatedAts {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.In,
			Arg: args,
		})
	}
}

// UpdatedAtNotIn applies "not in" operator on "updated_at" column
func UpdatedAtNotIn(updatedAts ...*time.Time) PredFunc {
	args := []interface{}{}
	for _, v := range updatedAts {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.NotIn,
			Arg: args,
		})
	}
}

// CreatedAtEq applies "equal" operator on "created_at" column
func CreatedAtEq(createdAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.Eq,
			Arg: createdAt,
		})
	}
}

// CreatedAtNotEq applies "not equal" operator on "created_at" column
func CreatedAtNotEq(createdAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.NotEq,
			Arg: createdAt,
		})
	}
}

// CreatedAtGt applies "greater than" operator on "created_at" column
func CreatedAtGt(createdAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.Gt,
			Arg: createdAt,
		})
	}
}

// CreatedAtGtOrEq applies "greater than or equal" operator on "created_at" column
func CreatedAtGtOrEq(createdAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.GtOrEq,
			Arg: createdAt,
		})
	}
}

// CreatedAtLt applies "less than" operator on "created_at" column
func CreatedAtLt(createdAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.Lt,
			Arg: createdAt,
		})
	}
}

// CreatedAtLtOrEq applies "less than or equal" operator on "created_at" column
func CreatedAtLtOrEq(createdAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.LtOrEq,
			Arg: createdAt,
		})
	}
}

// CreatedAtIsNull applies "is null" operator on "created_at" column
func CreatedAtIsNull() PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.IsNull,
		})
	}
}

// CreatedAtIsNotNull applies "is not null" operator on "created_at" column
func CreatedAtIsNotNull() PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.IsNotNull,
		})
	}
}

// CreatedAtIn applies "in" operator on "created_at" column
func CreatedAtIn(createdAts ...*time.Time) PredFunc {
	args := []interface{}{}
	for _, v := range createdAts {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.In,
			Arg: args,
		})
	}
}

// CreatedAtNotIn applies "not in" operator on "created_at" column
func CreatedAtNotIn(createdAts ...*time.Time) PredFunc {
	args := []interface{}{}
	for _, v := range createdAts {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.NotIn,
			Arg: args,
		})
	}
}
