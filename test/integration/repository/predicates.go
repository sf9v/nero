// Code generated by nero, DO NOT EDIT.
package repository

import (
	"time"

	"github.com/segmentio/ksuid"
	"github.com/sf9v/nero/comparison"
	"github.com/sf9v/nero/test/integration/user"
)

// PredFunc is a predicate function
type PredFunc func(*comparison.Predicates)

// IDEq is a "equal" operator on "id" column
func IDEq(id string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.Eq,
			Arg: id,
		})
	}
}

// IDNotEq is a "not equal" operator on "id" column
func IDNotEq(id string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.NotEq,
			Arg: id,
		})
	}
}

// IDGt is a "greater than" operator on "id" column
func IDGt(id string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.Gt,
			Arg: id,
		})
	}
}

// IDGtOrEq is a "greater than or equal" operator on "id" column
func IDGtOrEq(id string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.GtOrEq,
			Arg: id,
		})
	}
}

// IDLt is a "less than" operator on "id" column
func IDLt(id string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.Lt,
			Arg: id,
		})
	}
}

// IDLtOrEq is a "less than or equal" operator on "id" column
func IDLtOrEq(id string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.LtOrEq,
			Arg: id,
		})
	}
}

// IDIn is a "in" operator on "id" column
func IDIn(ids ...string) PredFunc {
	args := []interface{}{}
	for _, v := range ids {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.In,
			Arg: args,
		})
	}
}

// IDNotIn is a "not in" operator on "id" column
func IDNotIn(ids ...string) PredFunc {
	args := []interface{}{}
	for _, v := range ids {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "id",
			Op:  comparison.NotIn,
			Arg: args,
		})
	}
}

// UIDEq is a "equal" operator on "uid" column
func UIDEq(uid ksuid.KSUID) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "uid",
			Op:  comparison.Eq,
			Arg: uid,
		})
	}
}

// UIDNotEq is a "not equal" operator on "uid" column
func UIDNotEq(uid ksuid.KSUID) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "uid",
			Op:  comparison.NotEq,
			Arg: uid,
		})
	}
}

// UIDGt is a "greater than" operator on "uid" column
func UIDGt(uid ksuid.KSUID) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "uid",
			Op:  comparison.Gt,
			Arg: uid,
		})
	}
}

// UIDGtOrEq is a "greater than or equal" operator on "uid" column
func UIDGtOrEq(uid ksuid.KSUID) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "uid",
			Op:  comparison.GtOrEq,
			Arg: uid,
		})
	}
}

// UIDLt is a "less than" operator on "uid" column
func UIDLt(uid ksuid.KSUID) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "uid",
			Op:  comparison.Lt,
			Arg: uid,
		})
	}
}

// UIDLtOrEq is a "less than or equal" operator on "uid" column
func UIDLtOrEq(uid ksuid.KSUID) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "uid",
			Op:  comparison.LtOrEq,
			Arg: uid,
		})
	}
}

// UIDIn is a "in" operator on "uid" column
func UIDIn(uids ...ksuid.KSUID) PredFunc {
	args := []interface{}{}
	for _, v := range uids {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "uid",
			Op:  comparison.In,
			Arg: args,
		})
	}
}

// UIDNotIn is a "not in" operator on "uid" column
func UIDNotIn(uids ...ksuid.KSUID) PredFunc {
	args := []interface{}{}
	for _, v := range uids {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "uid",
			Op:  comparison.NotIn,
			Arg: args,
		})
	}
}

// EmailEq is a "equal" operator on "email" column
func EmailEq(email string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.Eq,
			Arg: email,
		})
	}
}

// EmailNotEq is a "not equal" operator on "email" column
func EmailNotEq(email string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.NotEq,
			Arg: email,
		})
	}
}

// EmailGt is a "greater than" operator on "email" column
func EmailGt(email string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.Gt,
			Arg: email,
		})
	}
}

// EmailGtOrEq is a "greater than or equal" operator on "email" column
func EmailGtOrEq(email string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.GtOrEq,
			Arg: email,
		})
	}
}

// EmailLt is a "less than" operator on "email" column
func EmailLt(email string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.Lt,
			Arg: email,
		})
	}
}

// EmailLtOrEq is a "less than or equal" operator on "email" column
func EmailLtOrEq(email string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.LtOrEq,
			Arg: email,
		})
	}
}

// EmailIn is a "in" operator on "email" column
func EmailIn(emails ...string) PredFunc {
	args := []interface{}{}
	for _, v := range emails {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.In,
			Arg: args,
		})
	}
}

// EmailNotIn is a "not in" operator on "email" column
func EmailNotIn(emails ...string) PredFunc {
	args := []interface{}{}
	for _, v := range emails {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "email",
			Op:  comparison.NotIn,
			Arg: args,
		})
	}
}

// NameEq is a "equal" operator on "name" column
func NameEq(name string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.Eq,
			Arg: name,
		})
	}
}

// NameNotEq is a "not equal" operator on "name" column
func NameNotEq(name string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.NotEq,
			Arg: name,
		})
	}
}

// NameGt is a "greater than" operator on "name" column
func NameGt(name string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.Gt,
			Arg: name,
		})
	}
}

// NameGtOrEq is a "greater than or equal" operator on "name" column
func NameGtOrEq(name string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.GtOrEq,
			Arg: name,
		})
	}
}

// NameLt is a "less than" operator on "name" column
func NameLt(name string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.Lt,
			Arg: name,
		})
	}
}

// NameLtOrEq is a "less than or equal" operator on "name" column
func NameLtOrEq(name string) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.LtOrEq,
			Arg: name,
		})
	}
}

// NameIn is a "in" operator on "name" column
func NameIn(names ...string) PredFunc {
	args := []interface{}{}
	for _, v := range names {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.In,
			Arg: args,
		})
	}
}

// NameNotIn is a "not in" operator on "name" column
func NameNotIn(names ...string) PredFunc {
	args := []interface{}{}
	for _, v := range names {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "name",
			Op:  comparison.NotIn,
			Arg: args,
		})
	}
}

// AgeEq is a "equal" operator on "age" column
func AgeEq(age int) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.Eq,
			Arg: age,
		})
	}
}

// AgeNotEq is a "not equal" operator on "age" column
func AgeNotEq(age int) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.NotEq,
			Arg: age,
		})
	}
}

// AgeGt is a "greater than" operator on "age" column
func AgeGt(age int) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.Gt,
			Arg: age,
		})
	}
}

// AgeGtOrEq is a "greater than or equal" operator on "age" column
func AgeGtOrEq(age int) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.GtOrEq,
			Arg: age,
		})
	}
}

// AgeLt is a "less than" operator on "age" column
func AgeLt(age int) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.Lt,
			Arg: age,
		})
	}
}

// AgeLtOrEq is a "less than or equal" operator on "age" column
func AgeLtOrEq(age int) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.LtOrEq,
			Arg: age,
		})
	}
}

// AgeIn is a "in" operator on "age" column
func AgeIn(ages ...int) PredFunc {
	args := []interface{}{}
	for _, v := range ages {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.In,
			Arg: args,
		})
	}
}

// AgeNotIn is a "not in" operator on "age" column
func AgeNotIn(ages ...int) PredFunc {
	args := []interface{}{}
	for _, v := range ages {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "age",
			Op:  comparison.NotIn,
			Arg: args,
		})
	}
}

// GroupEq is a "equal" operator on "group" column
func GroupEq(group user.Group) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "group",
			Op:  comparison.Eq,
			Arg: group,
		})
	}
}

// GroupNotEq is a "not equal" operator on "group" column
func GroupNotEq(group user.Group) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "group",
			Op:  comparison.NotEq,
			Arg: group,
		})
	}
}

// GroupGt is a "greater than" operator on "group" column
func GroupGt(group user.Group) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "group",
			Op:  comparison.Gt,
			Arg: group,
		})
	}
}

// GroupGtOrEq is a "greater than or equal" operator on "group" column
func GroupGtOrEq(group user.Group) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "group",
			Op:  comparison.GtOrEq,
			Arg: group,
		})
	}
}

// GroupLt is a "less than" operator on "group" column
func GroupLt(group user.Group) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "group",
			Op:  comparison.Lt,
			Arg: group,
		})
	}
}

// GroupLtOrEq is a "less than or equal" operator on "group" column
func GroupLtOrEq(group user.Group) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "group",
			Op:  comparison.LtOrEq,
			Arg: group,
		})
	}
}

// GroupIn is a "in" operator on "group" column
func GroupIn(groups ...user.Group) PredFunc {
	args := []interface{}{}
	for _, v := range groups {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "group",
			Op:  comparison.In,
			Arg: args,
		})
	}
}

// GroupNotIn is a "not in" operator on "group" column
func GroupNotIn(groups ...user.Group) PredFunc {
	args := []interface{}{}
	for _, v := range groups {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "group",
			Op:  comparison.NotIn,
			Arg: args,
		})
	}
}

// UpdatedAtEq is a "equal" operator on "updated_at" column
func UpdatedAtEq(updatedAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.Eq,
			Arg: updatedAt,
		})
	}
}

// UpdatedAtNotEq is a "not equal" operator on "updated_at" column
func UpdatedAtNotEq(updatedAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.NotEq,
			Arg: updatedAt,
		})
	}
}

// UpdatedAtGt is a "greater than" operator on "updated_at" column
func UpdatedAtGt(updatedAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.Gt,
			Arg: updatedAt,
		})
	}
}

// UpdatedAtGtOrEq is a "greater than or equal" operator on "updated_at" column
func UpdatedAtGtOrEq(updatedAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.GtOrEq,
			Arg: updatedAt,
		})
	}
}

// UpdatedAtLt is a "less than" operator on "updated_at" column
func UpdatedAtLt(updatedAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.Lt,
			Arg: updatedAt,
		})
	}
}

// UpdatedAtLtOrEq is a "less than or equal" operator on "updated_at" column
func UpdatedAtLtOrEq(updatedAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.LtOrEq,
			Arg: updatedAt,
		})
	}
}

// UpdatedAtIsNull is a "is null" operator on "updated_at" column
func UpdatedAtIsNull() PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.IsNull,
		})
	}
}

// UpdatedAtIsNotNull is a "is not null" operator on "updated_at" column
func UpdatedAtIsNotNull() PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.IsNotNull,
		})
	}
}

// UpdatedAtIn is a "in" operator on "updated_at" column
func UpdatedAtIn(updatedAts ...*time.Time) PredFunc {
	args := []interface{}{}
	for _, v := range updatedAts {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.In,
			Arg: args,
		})
	}
}

// UpdatedAtNotIn is a "not in" operator on "updated_at" column
func UpdatedAtNotIn(updatedAts ...*time.Time) PredFunc {
	args := []interface{}{}
	for _, v := range updatedAts {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "updated_at",
			Op:  comparison.NotIn,
			Arg: args,
		})
	}
}

// CreatedAtEq is a "equal" operator on "created_at" column
func CreatedAtEq(createdAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.Eq,
			Arg: createdAt,
		})
	}
}

// CreatedAtNotEq is a "not equal" operator on "created_at" column
func CreatedAtNotEq(createdAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.NotEq,
			Arg: createdAt,
		})
	}
}

// CreatedAtGt is a "greater than" operator on "created_at" column
func CreatedAtGt(createdAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.Gt,
			Arg: createdAt,
		})
	}
}

// CreatedAtGtOrEq is a "greater than or equal" operator on "created_at" column
func CreatedAtGtOrEq(createdAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.GtOrEq,
			Arg: createdAt,
		})
	}
}

// CreatedAtLt is a "less than" operator on "created_at" column
func CreatedAtLt(createdAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.Lt,
			Arg: createdAt,
		})
	}
}

// CreatedAtLtOrEq is a "less than or equal" operator on "created_at" column
func CreatedAtLtOrEq(createdAt *time.Time) PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.LtOrEq,
			Arg: createdAt,
		})
	}
}

// CreatedAtIsNull is a "is null" operator on "created_at" column
func CreatedAtIsNull() PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.IsNull,
		})
	}
}

// CreatedAtIsNotNull is a "is not null" operator on "created_at" column
func CreatedAtIsNotNull() PredFunc {
	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.IsNotNull,
		})
	}
}

// CreatedAtIn is a "in" operator on "created_at" column
func CreatedAtIn(createdAts ...*time.Time) PredFunc {
	args := []interface{}{}
	for _, v := range createdAts {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.In,
			Arg: args,
		})
	}
}

// CreatedAtNotIn is a "not in" operator on "created_at" column
func CreatedAtNotIn(createdAts ...*time.Time) PredFunc {
	args := []interface{}{}
	for _, v := range createdAts {
		args = append(args, v)
	}

	return func(pb *comparison.Predicates) {
		pb.Add(&comparison.Predicate{
			Col: "created_at",
			Op:  comparison.NotIn,
			Arg: args,
		})
	}
}
