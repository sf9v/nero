package gen

import (
	"bytes"
	"text/template"

	"github.com/sf9v/nero"
)

func newRepositoryFile(schema *nero.Schema) (*bytes.Buffer, error) {
	tmpl, err := template.New("repository.tmpl").
		Funcs(nero.NewFuncMap()).Parse(repositoryTmpl)
	if err != nil {
		return nil, err
	}

	buf := new(bytes.Buffer)
	err = tmpl.Execute(buf, schema)
	return buf, err
}

const repositoryTmpl = `
// Code generated by nero, DO NOT EDIT.
package {{.PkgName}}

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/sf9v/nero"
	multierror "github.com/hashicorp/go-multierror"
	{{range $import := .Imports -}}
		"{{$import}}"
	{{end -}}
)

// Repository is an interface for interacting with a {{.TypeInfo.Name}} repository
type Repository interface {
	// Tx begins a new transaction
	Tx(context.Context) (nero.Tx, error)
	// Create runs a create
	Create(context.Context, *Creator) (id {{rawType .Identity.TypeInfo.V}}, err error)
	// CreateTx runs a create in a transaction
	CreateTx(context.Context, nero.Tx, *Creator) (id {{rawType .Identity.TypeInfo.V}}, err error)
	// CreateMany runs a batch create
	CreateMany(context.Context, ...*Creator) error
	// CreateManyTx runs a batch create in a transaction
	CreateManyTx(context.Context, nero.Tx, ...*Creator) error
	// Query runs a query
	Query(context.Context, *Queryer) ([]{{rawType .TypeInfo.V}}, error)
	// QueryTx runs a query in a transaction
	QueryTx(context.Context, nero.Tx, *Queryer) ([]{{rawType .TypeInfo.V}}, error)
	// QueryOne runs a query that expects only one result
	QueryOne(context.Context, *Queryer) ({{rawType .TypeInfo.V}}, error)
	// QueryOneTx runs a query that expects only one result in a transaction
	QueryOneTx(context.Context, nero.Tx, *Queryer) ({{rawType .TypeInfo.V}}, error)
	// Update runs an update
	Update(context.Context, *Updater) (rowsAffected int64, err error)
	// UpdateTx runs an update in a transaction
	UpdateTx(context.Context, nero.Tx, *Updater) (rowsAffected int64, err error)
	// Delete runs a delete
	Delete(context.Context, *Deleter) (rowsAffected int64, err error)
	// Delete runs a delete in a transaction
	DeleteTx(context.Context, nero.Tx, *Deleter) (rowsAffected int64, err error)
	// Aggregate runs aggregate query
	Aggregate(context.Context, *Aggregator) error
	// Aggregate runs aggregate query in a transaction
	AggregateTx(context.Context, nero.Tx, *Aggregator) error
}


{{ $cols := prependToColumns .Identity .Columns }}

// Creator is a create builder
type Creator struct {
	{{range $col := $cols -}}
		{{if ne $col.IsAuto true -}}
		{{$col.Identifier}} {{rawType $col.TypeInfo.V}}
		{{end -}}
	{{end -}}
}

// NewCreator returns a Creator
func NewCreator() *Creator {
	return &Creator{}
}

{{range $col := $cols }}
	{{if ne $col.IsAuto true -}}
		// {{$col.FieldName}} sets the {{$col.FieldName}} field
		func (c *Creator) {{$col.FieldName}}({{$col.Identifier}} {{rawType $col.TypeInfo.V}}) *Creator {
			c.{{$col.Identifier}} = {{$col.Identifier}}
			return c
		}
	{{end -}}
{{end -}}

// Validate validates the fields
func (c *Creator) Validate() error {
	var err error
	{{range $col := .Columns -}}
		{{if and (ne $col.IsOptional true) (ne $col.IsAuto true) -}}
			if isZero(c.{{$col.Identifier}}) {
				err = multierror.Append(err, nero.NewErrRequiredField("{{$col.Name}}"))
			}
		{{end}} 
	{{end}}

	return err
}

// Queryer is a query builder
type Queryer struct {
	limit  uint
	offset uint
	pfs    []PredFunc
	sfs    []SortFunc
}

// NewQueryer returns a Queryer
func NewQueryer() *Queryer {
	return &Queryer{}
}

// Where applies predicates
func (q *Queryer) Where(pfs ...PredFunc) *Queryer {
	q.pfs = append(q.pfs, pfs...)
	return q
}

// Sort applies sorting expressions
func (q *Queryer) Sort(sfs ...SortFunc) *Queryer {
	q.sfs = append(q.sfs, sfs...)
	return q
}

// Limit applies limit
func (q *Queryer) Limit(limit uint) *Queryer {
	q.limit = limit
	return q
}

// Offset applies offset
func (q *Queryer) Offset(offset uint) *Queryer {
	q.offset = offset
	return q
}

// Updater is an update builder
type Updater struct {
	{{range $col := .Columns -}}
		{{if ne $col.IsAuto true -}}
			{{$col.Identifier}} {{rawType $col.TypeInfo.V}}
		{{end -}}
	{{end -}}
	pfs []PredFunc
}

// NewUpdater returns an Updater
func NewUpdater() *Updater {
	return &Updater{}
}

{{range $col := .Columns}}
	{{if ne $col.IsAuto true -}}
		// {{$col.FieldName}} sets the {{$col.FieldName}} field
		func (c *Updater) {{$col.FieldName}}({{$col.Identifier}} {{rawType $col.TypeInfo.V}}) *Updater {
			c.{{$col.Identifier}} = {{$col.Identifier}}
			return c
		}
	{{end -}}
{{end -}}

// Where applies predicates
func (u *Updater) Where(pfs ...PredFunc) *Updater {
	u.pfs = append(u.pfs, pfs...)
	return u
}

// Deleter is a delete builder
type Deleter struct {
	pfs []PredFunc
}

// NewDeleter returns a Deleter
func NewDeleter() *Deleter {
	return &Deleter{}
}

// Where applies predicates
func (d *Deleter) Where(pfs ...PredFunc) *Deleter {
	d.pfs = append(d.pfs, pfs...)
	return d
}

// Aggregator is an aggregate query builder
type Aggregator struct {
	v      interface{}
	aggfs  []AggFunc
	pfs    []PredFunc
	sfs    []SortFunc
	groups []Column
}

// NewAggregator expects a v and returns an Aggregator 
// where 'v' argument must be an array of struct
func NewAggregator(v interface{}) *Aggregator {
	return &Aggregator{v: v}
}

// Aggregate applies aggregate functions
func (a *Aggregator) Aggregate(aggfs ...AggFunc) *Aggregator {
	a.aggfs = append(a.aggfs, aggfs...)
	return a
}

// Where applies predicates
func (a *Aggregator) Where(pfs ...PredFunc) *Aggregator {
	a.pfs = append(a.pfs, pfs...)
	return a
}

// Sort applies sorting expressions
func (a *Aggregator) Sort(sfs ...SortFunc) *Aggregator {
	a.sfs = append(a.sfs, sfs...)
	return a
}

// Group applies group clauses
func (a *Aggregator) Group(cols ...Column) *Aggregator {
	a.groups = append(a.groups, cols...)
	return a
}

// rollback performs a rollback
func rollback(tx nero.Tx, err error) error {
	rerr := tx.Rollback()
	if rerr != nil {
		err = errors.Wrapf(err, "rollback error: %v", rerr)
	}
	return err
}

// isZero checks if v is a zero-value
func isZero(v interface{}) bool {
	return reflect.ValueOf(v).IsZero()
}
`
