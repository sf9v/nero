package gen

import (
	"bytes"
	"text/template"

	"github.com/sf9v/nero"
	"github.com/sf9v/nero/aggregate"
)

func newAggregateFile(schema *nero.Schema) (*bytes.Buffer, error) {
	v := struct {
		Operators []aggregate.Operator
		Schema    *nero.Schema
	}{
		Operators: []aggregate.Operator{
			aggregate.Avg, aggregate.Count,
			aggregate.Max, aggregate.Min,
			aggregate.Sum, aggregate.None,
		},
		Schema: schema,
	}

	tmpl, err := template.New("aggregates.tmpl").
		Parse(aggregatesTmpl)
	if err != nil {
		return nil, err
	}

	buf := new(bytes.Buffer)
	err = tmpl.Execute(buf, v)
	if err != nil {
		return nil, err
	}

	return buf, nil
}

const aggregatesTmpl = `
// Code generated by nero, DO NOT EDIT.
package {{.Schema.PkgName}}

import (
	"github.com/sf9v/nero/aggregate"
)

{{range $op := .Operators}}
// {{$op.String}} is a {{$op.Desc}} aggregate operator
func {{$op.String}}(col Column) aggregate.AggFunc {
	return func(aggs []*aggregate.Aggregate) []*aggregate.Aggregate {
		return append(aggs, &aggregate.Aggregate{
			Col: col.String(),
			Op: aggregate.{{$op.String}},
		})
	}
}
{{end}}
`
